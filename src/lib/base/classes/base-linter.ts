import { folderName } from 'tnp-config/src';
import { _, path } from 'tnp-core/src';

import { Helpers } from '../../index';

import { BaseFeatureForProject } from './base-feature-for-project';
import type { BaseProject } from './base-project';

// TODO
export class BaseLinter<
  PROJECT extends BaseProject = any,
> extends BaseFeatureForProject<PROJECT> {
  async init(): Promise<void> {
    this.writeLintFiles();
  }

  getLintFiles(): string[] {
    return ['.prettierignore', '.prettierrc', '.editorconfig'];
  }

  //#region get editorconfig settings
  getConfigEditorconfig(): string {
    return `
# Editor configuration, see http://editorconfig.org
root = true

[*]
charset = utf-8
indent_style = space
indent_size = 2
insert_final_newline = true
trim_trailing_whitespace = true

[*.ts]
quote_type = single

[*.md]
max_line_length = off
trim_trailing_whitespace = false
`;
  }
  //#endregion

  //#region get prettier settings
  getConfigPrettierrc(): object {
    //#region @backendFunc
    return {
      tabWidth: 2,
      useTabs: false,
      singleQuote: true,
      semi: true,
      bracketSpacing: true,
      arrowParens: 'avoid',
      trailingComma: 'all',
      bracketSameLine: true,
      printWidth: 80,
      singleAttributePerLine: true,
      endOfLine: 'auto',
    };
    //#endregion
  }
  //#endregion

  //#region get prettier ignore settings
  getConfigPrettierignore(): string {
    //#region @backendFunc
    return `
# This file is generated by taon.dev
/build
/coverage
/e2e
/docs
/node_modules
*.md
**/*.md
tmp-*
**/tmp-*
**/src/assets/**/*.*
/.build
/projects
*.js

/dist*
/bundle*
/browser
/browser*
/websql
/websql*
/module*
/backup
/module
/www

      `;
    //#endregion
  }
  //#endregion

  isEnableForProject(): boolean {
    return true;
  }

  //#region write lint files
  public writeLintFiles(): void {
    //#region @backendFunc
    for (const fileName of this.getLintFiles()) {
      const nameOfMethod =
        `getConfig${_.upperFirst(_.camelCase(fileName))}` as keyof BaseLinter;
      if ((this as any)[nameOfMethod]) {
        const content = (this as any)[nameOfMethod]();
        if (_.isObject(content)) {
          this.project.writeJson(fileName, content);
        } else {
          this.project.writeFile(fileName, content);
        }
      } else {
        Helpers.warn(
          `You have to implement method ${nameOfMethod}() in class (Base)Linter`,
        );
      }
    }
    //#endregion
  }
  //#endregion
}
